//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "ResultUnit.h"
#include "MainUnit.h"
#include "ExcelUnit.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TResultForm *ResultForm;
//---------------------------------------------------------------------------
double cov_func(int i, int j, int n){
	double xm = 0;
	double ym = 0;
	for (int count = 0; count < n; count++) {
		xm += StrToFloat(MainForm->StringGridExcel->Cells[i][count+1]);
		ym += StrToFloat(MainForm->StringGridExcel->Cells[j][count+1]);
	}
	xm=xm/n;
	ym=ym/n;

	double cov = 0;
	for (int count = 0; count < n; count++) {
		cov += (StrToFloat(MainForm->StringGridExcel->Cells[i][count+1]) -
		xm)*(StrToFloat(MainForm->StringGridExcel->Cells[j][count+1]) - ym);
    }

	return cov/(n-1);
}
//---------------------------------------------------------------------------

double Pearson (int i, int j, int n){
	double s=cov_func(i, i, n)*cov_func(j, j, n);
	if (!s) return 0;
	else return cov_func(i, j, n)/sqrt(s);
}
//---------------------------------------------------------------------------

__fastcall TResultForm::TResultForm(TComponent* Owner)
	: TForm(Owner)
{
	int count = MainForm->ListBoxMain->Count;
	this->StringGridResult->ColCount = count+1;
	this->StringGridResult->RowCount = count+1;
	for (int j = 0; j < count; j++) {
		this->StringGridResult->Cells[j+1][0] = MainForm->ListBoxMain->Items->Strings[j];
		this->StringGridResult->Cells[0][j+1] = MainForm->ListBoxMain->Items->Strings[j];
	}
	for (int i = 0; i < MainForm->ListBoxNumbers->Items->Count; i++) {
		for (int j = 0; j < i+1; j++){
			double res = Pearson(StrToInt(MainForm->ListBoxNumbers->Items->Strings[i]), StrToInt(MainForm->ListBoxNumbers->Items->Strings[j]), MainForm->StringGridExcel->RowCount - 1);
			ResultForm->StringGridResult->Cells[i][j]= FloatToStr(res);
		}
	}
}
//---------------------------------------------------------------------------
